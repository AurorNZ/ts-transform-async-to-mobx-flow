// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Converts function marked as transformToMobxFlow 1`] = `
"import * as mobx from \\"mobx\\";
/// <reference path=\\"../../transformToMobxFlow.d.ts\\" />
declare let randomDecorator: any;
export const fn = (input) => { return mobx.flow(function* fn() {
    return yield Promise.resolve(input);
}).call(this); };
export const fn2 = function test(input) { return mobx.flow(function* test() {
    return yield Promise.resolve(input);
}).call(this); };
export const fn3 = function (input) { return mobx.flow(function* fn3() {
    return yield Promise.resolve(input);
}).call(this); };
export class Test {
    test: number = 0;
    constructor() {
        var nestedFlow = () => { return mobx.flow(function* nestedFlow() {
            var anotherNestedFlow = () => { return mobx.flow(function* anotherNestedFlow() {
                this.test = 5;
                yield Promise.resolve(100);
            }).call(this); };
            this.test = 5;
            yield anotherNestedFlow();
        }).call(this); };
    }
    func() { return mobx.flow(function* func() {
        this.test = 5;
        yield Promise.resolve(100);
    }).call(this); }
    funcBound = () => { return mobx.flow(function* funcBound() {
        this.test = 5;
        yield Promise.resolve(100);
    }).call(this); };
    @randomDecorator
    funcNonBound = function (this: Test) { return mobx.flow(function* funcNonBound() {
        this.test = 5;
        yield Promise.resolve(100);
    }).call(this); };
}
"
`;

exports[`Does not convert function not marked as transformToMobxFlow 1`] = `
"export async function fn(input: string) {
    return await Promise.resolve(input);
}
export const fn2 = async (input: string) => {
    return await Promise.resolve(input);
};
export class Test {
    test: number = 0;
    constructor() {
        var nestedFlow = async () => {
            var anotherNestedFlow = async () => {
                this.test = 5;
                await Promise.resolve(100);
            };
            this.test = 5;
            await anotherNestedFlow();
        };
    }
    async func() {
        this.test = 5;
        await Promise.resolve(100);
    }
    funcBound = async () => {
        this.test = 5;
        await Promise.resolve(100);
    };
    funcNonBound = async function (this: Test) {
        this.test = 5;
        await Promise.resolve(100);
    };
}
"
`;
